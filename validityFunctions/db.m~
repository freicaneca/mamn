%%%%%%%%%%
%
% FUNÇÃO: db - Davies-Bouldin
%
% ENTRADA:
%
% - ind: Cromossomo com os clusters
% - dados: Base de dados sendo utilizada
%
% SAÍDA:
%
% - result: o valor da função calculada
%
%%%%%%%%%%
function [result] = db(ind, dados)

    result = -1;                             % inicializa o valor do resultado

    [clusters,~] = size(ind);
    [rowP,colP] = size(dados);
    
    D = pdist(ind);                         % calcula todas as distâncias euclidianas
    distances = squareform(D);              % matriz de distâncias
    
    s = espacamentos(clusters, ind, dados);     % vetor de espaçamentos
    
    for i=1:clusters
    
        for j=i+1:clusters
        
            temp = s(1)
            
        end
    end
    
    

end

%%%%%%%%%%
%
% FUNÇÃO: espacamentos
%
% ENTRADA:
%
% - totalClusters: Número total de clusters
% - ind: Cromossomo com os clusters
% - dados: Base de dados sendo utilizada
%
% SAÍDA:
%
% - resultS: vetor com os valores dos espaçamentos para todos os clusters
% do cromossomo
%
%%%%%%%%%%
function [resultS] = espacamentos(totalClusters, ind, dados)

    resultS = zeros(totalClusters,1);             % vetor de espaçamentos
    
    pert = pertinencia(ind, dados);               % a que clusters os dados pertencem
    
    for i=1:totalClusters
        
        c = sum(pert == i);                       % quantidade de elementos em um dado cluster
        somaDistancias = 0;
        
        tempDados = dados(pert == i);             % elementos pertencentes ao cluster i
               
        for j=1:c
            
            x = [tempDados(j);ind(i)];
            d = pdist(x);
            somaDistancias = somaDistancias + d;
        
        end
        
        resultS(i) = somaDistancias/c;
    
    end
end